name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
      - 'packages/db/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mariadb-admin ping -h 127.0.0.1 -uroot -proot"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          echo "Lockfile found, using frozen install"
          pnpm install --frozen-lockfile
        else
          echo "No lockfile found, installing without frozen lockfile"
          pnpm install --no-frozen-lockfile
        fi
    
    - name: Prepare environment file
      run: cp ./apps/web/env.example ./apps/web/.env

    - name: Wait for database
      shell: bash
      run: |
        for i in {1..30}; do
          (echo > /dev/tcp/127.0.0.1/3306) >/dev/null 2>&1 && break
          echo "Waiting for database..."
          sleep 2
        done

    - name: Push database schema
      run: pnpm db:push
      env:
        BETTER_AUTH_SECRET: "ci-test-secret-key-for-build-only"
        DATABASE_URL: "mysql://test:test@127.0.0.1:3306/test"
      
    - name: Build UI package
      run: pnpm --filter @quickpoll/ui build
      
    - name: Build web application
      run: pnpm build
      env:
        BETTER_AUTH_SECRET: "ci-test-secret-key-for-build-only"
        DATABASE_URL: "mysql://test:test@localhost:3306/test"
      
    - name: Type check
      run: |
        pnpm --filter web exec tsc --noEmit
        pnpm --filter @quickpoll/ui exec tsc --noEmit
        
    - name: Type check database package
      run: pnpm --filter db exec tsc --noEmit
