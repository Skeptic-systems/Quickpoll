name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          echo "Lockfile found, using frozen install"
          pnpm install --frozen-lockfile
        else
          echo "No lockfile found, installing without frozen lockfile"
          pnpm install --no-frozen-lockfile
        fi
      
    - name: Generate Prisma client
      run: pnpm db:generate
      env:
        BETTER_AUTH_SECRET: "ci-test-secret-key-for-build-only"
        DATABASE_URL: "mysql://test:test@localhost:3306/test"
      
    - name: Build UI package
      run: pnpm --filter @quickpoll/ui build
      
    - name: Build web application
      run: pnpm build
      env:
        BETTER_AUTH_SECRET: "ci-test-secret-key-for-build-only"
        DATABASE_URL: "mysql://test:test@localhost:3306/test"
      
    - name: Run linting
      run: pnpm lint
      
    - name: Type check
      run: |
        pnpm --filter web exec tsc --noEmit
        pnpm --filter @quickpoll/ui exec tsc --noEmit
        pnpm --filter db exec tsc --noEmit
